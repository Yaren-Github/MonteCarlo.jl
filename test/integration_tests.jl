@testset "MC: IsingModel Simulation" begin
    Random.seed!(123)
    m = IsingModel(dims=2, L=8);
    mc = MC(m, beta=0.35);
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements
    measured = measurements(mc)
    @test   25.47  ≈ measured[:Magn].M |> mean         atol=0.01
    @test    0.82  ≈ measured[:Magn].M |> std_error    atol=0.01
    @test  887.    ≈ measured[:Magn].M2 |> mean        atol=1.0
    @test   46.    ≈ measured[:Magn].M2 |> std_error   atol=1.0
    @test    0.398 ≈ measured[:Magn].m |> mean         atol=0.001
    @test    0.013 ≈ measured[:Magn].m |> std_error    atol=0.001
    @test    1.300 ≈ measured[:Magn].chi |> mean       atol=0.001

    @test  -59.10  ≈ measured[:Energy].E |> mean       atol=0.01
    @test    0.88  ≈ measured[:Energy].E |> std_error  atol=0.01
    @test 3799.    ≈ measured[:Energy].E2 |> mean      atol=1.0
    @test  111.    ≈ measured[:Energy].E2 |> std_error atol=1.0
    @test   -0.924 ≈ measured[:Energy].e |> mean       atol=0.001
    @test    0.014 ≈ measured[:Energy].e |> std_error  atol=0.001
    @test    0.585 ≈ measured[:Energy].C |> mean       atol=0.001

    @test isempty(mc.configs) == true
end


@testset "DQMC: HubbardModel Simulation" begin
    Random.seed!(123)
    m = HubbardModelAttractive(dims=2, L=4);
    N = 4*4
    mc = DQMC(m, beta=1.0);
    mask = MonteCarlo.DistanceMask(MonteCarlo.lattice(m))
    MonteCarlo.unsafe_push!(mc, :CDC => MonteCarlo.ChargeDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :SDC => MonteCarlo.SpinDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement(mc, m, mask=mask))
    @time run!(mc, sweeps=1000, thermalization=1000, verbose=false);

    # Check measurements
    measured = measurements(mc)

    # Greens
    @test [
        0.5118928077804319 -0.14903246677502688 -0.0032473512413317544 -0.15860812965155133 -0.1691374598429135 0.0011714972930712303 0.03768904098900951 -0.0032160152749826174 -0.0026933815882398283 0.03504687459111208 3.749995650417818e-5 0.038149382006756286 -0.15892195842122805 -0.0016667788094016347 0.03482415003929788 0.0003883901797723591; -0.1629148807909891 0.4951908090962254 -0.17158313045360488 -0.004098872422178873 0.0005361557189676973 -0.16357578094023315 0.0009703059608236553 0.035865806773371006 0.03665214733625104 -0.003063118651453089 0.03709094770111889 -0.00023538201053262918 -0.0018091940169892877 -0.16684474323997928 -0.0016355755882271209 0.03593973459132191; 0.0011627026202073142 -0.13664565765652564 0.5061544247377241 -0.14989646180437463 0.034312470898490044 0.0007647802157900778 -0.15499085250234285 -0.0015381707358947017 0.0009691243589713371 0.032469354840238045 -0.002386656938439731 0.035679180609113036 0.031861614671798794 -0.001323947390392463 -0.14705959523946566 0.0022214941777153117; -0.14706777094705148 -0.0002540293242486073 -0.15832186672477166 0.516373476759536 -0.0028068335088983036 0.03294682128823341 -0.003301426749178864 -0.15158471689357841 0.0329574317324467 0.0011342478925527107 0.034420174070024026 -0.0012655948369100847 -0.0032138438487673633 0.03408976355612466 0.0008944346697545426 -0.1510628974441383; -0.1423690890743389 -0.0006270322910352763 0.031640464642829595 -0.0033057732282334796 0.492247456841065 -0.1465697762688371 0.00035480206061564546 -0.14352187219145507 -0.14638597650053836 0.0010529228515885418 0.03176608695043667 0.0015354026395107817 -0.0008157102327507998 0.03325167668212949 -0.001164996627742014 0.030627931869852545; 0.0012544522937403782 -0.13619043051807345 0.002429177493367941 0.03426851411125656 -0.16149582289216785 0.4923045557369784 -0.15688034294314485 0.0007792391266661066 0.0013392715634856739 -0.15027219947433892 0.0015487809424124474 0.0378905719789794 0.03290878389104908 0.0003319611894256719 0.03306896205704575 -0.004851034535943533; 0.031206847806625606 0.00010842898461388654 -0.1544673983455366 -0.002181936296791816 -0.00017885571418831448 -0.1500712464236228 0.49652703746836707 -0.148430928980082 0.03179069258764984 0.0027518553052924277 -0.1482550589233316 0.002351270465607263 0.0010729872982679315 0.035368300773078266 0.005036391127699145 0.030771829375887322; -0.0021765003729048078 0.032536747306837005 -0.003879550013777645 -0.1550745262549153 -0.1616062979286742 0.00229876840144799 -0.16041013138388124 0.5121938590897216 0.0004467181911024256 0.03545277268408573 -0.0008079349387972603 -0.1624744321742986 0.034922783337188366 0.0001082475107724486 0.035733645800369425 0.0023137970881120327; 0.0016469600620959584 0.02969622837908245 -0.0012128394361034208 0.03513850943366033 -0.15670861893529542 0.002285238797184208 0.034846568748812305 0.0009477704131335774 0.5081047048291026 -0.14915404271756688 -0.0015143252395140782 -0.1593779985345169 -0.1515067320247519 -0.0012931852809129074 0.035473859525155214 0.0054320691354766025; 0.035035090307634055 0.0006400555942482762 0.03755488020767543 -0.00022269338247183436 -0.00028958030541815003 -0.1586325983341063 0.004185085495154007 0.03389281650154331 -0.15994527317952278 0.4936678769975207 -0.16281415846648778 0.005698741565530495 -0.0018348083405971404 -0.1618365815509114 0.004183862217141485 0.03431015557904864; 0.0003442758342816193 0.0298467693502258 -0.0004961796172045994 0.034939356556823994 0.037007086125776245 0.0005529617767466851 -0.15542306971731398 -0.003059581159195349 -0.0004525493065386769 -0.15313052810436825 0.48969474153770215 -0.1629888047770904 0.034936613208434976 -0.0034455123535021477 -0.15642396239083975 0.0021445623965415696; 0.03086788056884809 -0.0023555501558528247 0.033042377789809174 0.0026283581130851796 0.0017024058803514002 0.03209113654642878 0.0042818894419071486 -0.1491009064724107 -0.14694470984617589 0.0037482140912678146 -0.15108310569600347 0.47490207168697707 0.0012990160622605939 0.0336792527673546 0.005645832958707935 -0.14373910499417916; -0.14674300056083336 -0.0021136371648328668 0.03505879303299739 -0.0014449922679261595 -0.0009472217062245386 0.03426194301816354 -0.0010700791536822959 0.031058769256902864 -0.15259125043797384 -0.002200017185811568 0.03548449964018784 0.001303670362896085 0.4984976140825981 -0.15240993786552154 -0.0007779468952137999 -0.14803697811619765; -0.002204737647209877 -0.14115518671152472 -0.002199003780198365 0.032641272509219436 0.0364207415553586 0.0008186116254801193 0.036328323951514925 0.0012439722497594164 -0.003304204719645683 -0.15447385733236857 -0.0009800681956154001 0.03600714625886892 -0.1551168181673603 0.5216157757085405 -0.1596821877401168 0.002563258942508079; 0.033591885320189994 -3.8091463748453245e-5 -0.1541658332864136 -0.0013532804260166142 -0.00010850492836477155 0.03442795351661153 0.0025724394649883453 0.03332510687149204 0.034674355604174034 0.0011442183439619022 -0.15737618769858394 0.00601880153577122 -0.0014906736689032554 -0.15461675999456198 0.48626941409023705 -0.14768889150987996; 0.002250508009714831 0.03089601609222839 0.0020344795683517425 -0.15881715254985176 0.03850093300709453 -0.0034111917591947726 0.03725477313010847 0.0007695775070779128 0.0013594557498407078 0.035969380830808154 0.003741988785930386 -0.16693203801578757 -0.16125038919200546 0.0034798163668211856 -0.16276750762662345 0.47869217933143815
    ] ≈ measured[:Greens].obs |> mean           atol=0.0001
    @test [
        0.015202139361956137 0.005245403991402949 0.0025826757749034656 0.005766045429792775 0.006413074835076423 0.002682336189917345 0.002011605609099261 0.00253722318518813 0.002739388611757115 0.0018833833558759704 0.0016966508496108607 0.0017816130173724327 0.004745077022979695 0.0025176999086617656 0.001668841899419418 0.0024640135301403254; 0.006078956271679638 0.019719539067698667 0.0071616875437295075 0.0033524283120247417 0.002745969423058439 0.005211097688411316 0.0027602342642917147 0.0020157243657933912 0.0016001836266744869 0.0032967221560369687 0.0016027128989724334 0.002549055659849634 0.002773072677143313 0.0063546214763277 0.0025705587772127027 0.001855215244535173; 0.0026971326941905203 0.005329813494129386 0.016772201614843905 0.005666408550521331 0.00225849008260267 0.0022704786725125355 0.005081998036369742 0.002519811427797873 0.0016977696437986832 0.001579608784268351 0.0026868196289733764 0.0018695314161505368 0.0017097511945475493 0.0024318486956912185 0.00466518493587889 0.002523691128992578; 0.004801767853926885 0.0029995424244923944 0.006008042878601532 0.01774233089501391 0.002359933872439547 0.0014654350759963815 0.0026902103467209377 0.005137976523635574 0.0017144294822067014 0.0020576085486225626 0.0017442213955873856 0.003039292029334899 0.002657519597191021 0.0014309183075552302 0.002565668400561256 0.0068746959319874205; 0.004767920126801299 0.002421543437453358 0.0015264763252921705 0.0021173310675408376 0.018290142266450808 0.004957190239111132 0.002352218608164037 0.0060583747697985114 0.005398699303749468 0.0022951235603976237 0.0017563141699442047 0.002677944149026059 0.0024806967357407362 0.0019546517848622047 0.0015236289305195706 0.0018063270915905675; 0.0023364757569910768 0.0034002510789201594 0.002383075635634262 0.0020912071474627797 0.007808041830837016 0.019865848721153857 0.005915621950834914 0.002649104649953702 0.0023660268400449228 0.005483541580162665 0.002249009151495107 0.0022936506356217947 0.0013635068332426567 0.0030821769623360458 0.0017694247697650045 0.002174913114699884; 0.001575874443346928 0.0022413552103869605 0.005968588051980198 0.002564164535846168 0.0029693348300046437 0.00559313148119901 0.019819913313043808 0.005587765914045678 0.0020347087498561803 0.002236457658477319 0.004758579362741348 0.0026341133352008237 0.0016597799391945935 0.0020938304704380168 0.0024682414992297213 0.0015407239381404197; 0.002333273769938887 0.0017632087357790976 0.002797079680147478 0.006007245089182576 0.007588043280556996 0.0028145019795621415 0.006507722329477205 0.020043850720708502 0.00265448933720433 0.0018719250455464305 0.0025440285398910475 0.005750435420518257 0.0018417980678928669 0.0023166441837542354 0.0014838924724093034 0.0026063399805836443; 0.0022590693191613734 0.0012550147778958814 0.002202351277394669 0.0022251181442741225 0.005686075979568781 0.0024289287435726474 0.002015582670445502 0.0028267745172728346 0.018514555719382375 0.005538004807072315 0.002762590247642793 0.006993894578383908 0.004800819676529346 0.0026016148575723486 0.0022201939896047853 0.00207656364455569; 0.0018630478623526169 0.002812986641427705 0.0018728082683145831 0.0019209474948792705 0.0027766318405645393 0.006349297295539025 0.002735558914931573 0.0019383584379955175 0.007292144695592866 0.01494082901947075 0.006316876236806594 0.0032664957571192257 0.002483336651849151 0.006921259906338377 0.0024723538266161666 0.0020755861790763726; 0.0016923155348579195 0.0014570696510586378 0.002603462899906454 0.0016788255467130155 0.0023935297617488985 0.0021172996673019455 0.004835370536922299 0.002621449540778995 0.0023770506458322196 0.0053277187317263735 0.014830298807818231 0.005960215796950188 0.0016532338544907803 0.0020903424353058723 0.004836482755283764 0.002067832719839762; 0.0015476498650736847 0.001973222131770902 0.001451014490025035 0.0025850101600970936 0.0026883298199671026 0.0015971229052546883 0.002796732559054912 0.005643048133838059 0.005042071552471635 0.0023957092966209303 0.005131131594065142 0.016801063638418354 0.0020960522533488434 0.0018371766611001382 0.0027469529157791678 0.005084436843584854; 0.005065566549728909 0.002321296756770405 0.0015688258605952572 0.002211169456079378 0.002601226086917335 0.001718572903950953 0.0019061409707258358 0.0015294709756136203 0.005438935186879404 0.0027013418660775013 0.0015662939251781115 0.0025011923457229075 0.01813242025145283 0.005149322578305324 0.002279057899299235 0.005641412269864024; 0.002024838408244035 0.00481675012203175 0.0026772959609770116 0.0016733634529269741 0.002124503812121726 0.002971422075706067 0.002019648866647866 0.0020972288624900364 0.0027204739862685145 0.005849809236651783 0.001955796233282633 0.0019819741029358877 0.005941397575480647 0.016850546065615625 0.006464943626287969 0.002683459549992998; 0.0014665307078224378 0.0022353676455473988 0.004948605392738777 0.0022123815091836703 0.0018388766720892603 0.0017915483630580487 0.002744695011649621 0.001716427022265076 0.002129649279114122 0.002623263974464278 0.005917755252393557 0.0029818011736952536 0.00248560716048841 0.005343974628375999 0.016442201544712362 0.005223901562655225; 0.002199531192559959 0.0017515981627575002 0.0030150528765659802 0.006271075957412368 0.0021867823365481166 0.001988035300041659 0.0019391533997633768 0.0026876896051509563 0.0021489753198621715 0.002361742695816039 0.002286286636433244 0.006692932262080547 0.00652768767742668 0.003015218502071464 0.007261687549004084 0.016714473608273214
    ] ≈ measured[:Greens].obs |> std_error      atol=0.0001

    # Boson Energy
    @test  0.230 ≈ measured[:BosonEnergy].obs |> mean           atol=0.001
    @test  0.478 ≈ measured[:BosonEnergy].obs |> std_error      atol=0.001

    # Configurations :conf
    @test [
        -0.1 0.0 -0.14 -0.04 0.0 -0.02 0.04 0.12 -0.06 0.0; -0.08 -0.08 -0.02 -0.24 -0.06 0.1 -0.14 0.12 0.24 0.14; 0.08 0.14 0.04 -0.08 -0.16 -0.1 0.12 -0.08 -0.04 -0.12; 0.04 -0.02 -0.1 -0.06 -0.1 0.02 -0.04 0.1 -0.22 0.02; 0.16 0.16 0.04 -0.14 0.12 0.06 -0.06 -0.08 -0.02 -0.14; 0.18 -0.12 -0.06 -0.02 0.02 0.08 0.14 0.18 -0.04 -0.12; 0.02 0.1 0.08 0.14 0.1 -0.1 -0.18 0.04 -0.02 -0.08; 0.0 -0.16 -0.06 -0.04 0.12 0.02 0.0 -0.1 -0.02 0.0; 0.0 -0.1 0.02 0.1 0.08 0.08 -0.04 -0.08 -0.08 -0.04; -0.02 -0.02 -0.06 0.08 0.06 0.02 -0.06 0.14 0.02 0.02; 0.04 0.16 0.06 0.2 -0.3 -0.24 0.1 0.0 -0.14 0.22; -0.02 0.26 0.22 0.14 0.0 0.14 -0.1 0.06 -0.08 -0.04; 0.18 -0.14 0.12 -0.08 -0.12 0.04 -0.04 0.04 0.1 -0.1; 0.02 -0.02 -0.14 0.12 -0.14 -0.04 0.0 -0.08 -0.02 -0.08; 0.04 0.1 0.04 0.2 -0.16 -0.04 0.08 -0.06 0.04 0.02; -0.18 0.08 0.22 0.04 -0.02 0.18 0.02 0.18 0.0 0.1
    ] ≈ [MonteCarlo.decompress(mc, m, c) for c in mc.configs] |> mean                    atol=0.01

    # Charge Density Correlation
    @test [
        1.565521275043134, 0.9507693564485455, 0.9527477142198585, 0.9507693564485454, 0.9527477142198585, 1.0186128423797647, 1.0074194461166897, 1.0063518873381339, 1.017353102172222, 1.0063518873381339, 1.0074194461166897, 1.0004339638555966, 1.0004339638555966, 0.9957863934441952, 0.9957863934441952, 1.0096152283868374
    ][:] ≈ mean(measured[:CDC])
    @test [
        0.01500705184787365, 0.016126617505772826, 0.01572437847260207, 0.01612661750577255, 0.015724378472601927, 0.015643977304970132, 0.016032430567336144, 0.015587499525710358, 0.015311978118005984, 0.015587499525710216, 0.016032430567336144, 0.01601782947833378, 0.01601782947833364, 0.016543152597418485, 0.016543152597418485, 0.016776820314560553
    ][:] ≈ std_error(measured[:CDC])

    # Spin density correlations (x, y, z)
    @test [
        0.44089652351332476, -0.043413933082508994, -0.04326395921174235, -0.043413933082508994, -0.043263959211742364, -0.0009771905705897675, -0.0008517396893119823, -0.0009113315156949425, -0.0010211980278960798, -0.0009113315156949424, -0.0008517396893119825, -0.001986344693425251, -0.001986344693425251, -0.0019853028154554267, -0.0019853028154554267, -0.00048333317862344987
    ][:] ≈ mean(measured[:SDC].x)
    @test [
        0.0017021559110863612, 0.00023403650517181266, 0.00022012927015134268, 0.00023403650517181266, 0.00022012927015135255, 5.103895434002496e-5, 2.5012381824787215e-5, 3.418657507565869e-5, 5.867978286294278e-5, 3.418657507565869e-5, 2.501238182478713e-5, 2.7738704017528266e-5, 2.7738704017527348e-5, 2.4836035531786952e-5, 2.4836035531786952e-5, 3.2838737563210674e-5
    ][:] ≈ std_error(measured[:SDC].x)
    @test [
        0.44089652351332476, -0.043413933082508994, -0.04326395921174235, -0.043413933082508994, -0.043263959211742364, -0.0009771905705897675, -0.0008517396893119823, -0.0009113315156949425, -0.0010211980278960798, -0.0009113315156949424, -0.0008517396893119825, -0.001986344693425251, -0.001986344693425251, -0.0019853028154554267, -0.0019853028154554267, -0.00048333317862344987
    ][:] ≈ mean(measured[:SDC].y)
    @test [
        0.0017021559110863612, 0.00023403650517181266, 0.00022012927015134268, 0.00023403650517181266, 0.00022012927015135255, 5.103895434002496e-5, 2.5012381824787215e-5, 3.418657507565869e-5, 5.867978286294278e-5, 3.418657507565869e-5, 2.501238182478713e-5, 2.7738704017528266e-5, 2.7738704017527348e-5, 2.4836035531786952e-5, 2.4836035531786952e-5, 3.2838737563210674e-5
    ][:] ≈ std_error(measured[:SDC].y)
    @test [
        0.44089652351332476, -0.043413933082508994, -0.043263959211742364, -0.043413933082508994, -0.043263959211742364, -0.0009771905705897679, -0.0008517396893119825, -0.0009113315156949424, -0.0010211980278960805, -0.0009113315156949423, -0.0008517396893119825, -0.0019863446934252505, -0.0019863446934252505, -0.0019853028154554267, -0.0019853028154554267, -0.0004833331786234493
    ][:] ≈ mean(measured[:SDC].z)
    @test [
        0.0017021559110863612, 0.00023403650517182193, 0.00022012927015137223, 0.00023403650517181266, 0.00022012927015137223, 5.103895434002521e-5, 2.501238182478726e-5, 3.418657507565844e-5, 5.8679782862942636e-5, 3.418657507565844e-5, 2.5012381824787344e-5, 2.7738704017526128e-5, 2.7738704017526128e-5, 2.483603553178661e-5, 2.4836035531786952e-5, 3.283873756321069e-5
    ][:] ≈ std_error(measured[:SDC].z)

    # Pairing Correlations
    @test [
        0.024782052188115293, 0.02145284242460299, 0.021519971753820616, 0.02145284242460299, 0.02151997175382061, 0.021983651648562086, 0.021799408256163305, 0.021781051917545962, 0.021968878101361822, 0.02178105191754595, 0.021799408256163305, 0.021680139413068643, 0.021680139413068646, 0.021570072888520295, 0.02157007288852029, 0.021861819050217127
    ] ≈ mean(measured[:PC])
    @test [
        0.0002500626272861693, 0.00023150144615311798, 0.0002460843940143996, 0.0002315014461531133, 0.0002460843940143996, 0.0002587576280586748, 0.00023558113095540844, 0.00023876552252566406, 0.00024752240204044826, 0.00023876552252566634, 0.00023558113095541533, 0.00023431008293388147, 0.0002343100829338745, 0.00022870708857216065, 0.0002287070885721654, 0.00023415341858611837
    ] ≈ std_error(measured[:PC])
end



# TODO
# remove this / make this an example / make this faster
#=


"""
    stat_equal(
        expected_value, actual_values, standard_errors;
        min_error = 0.1^3, order=2, rtol = 0, debug=false
    )

Compare an `expected_value` (i.e. literature value, exact result, ...) to a set
of `actual_values` and `standard_errors` (i.e. calculated from DQMC or MC).

- `order = 2`: Sets the number of σ-intervals included. (This affects the
accuracy of the comaprison and the number of matches required)
- `min_error = 0.1^3`: Sets a lower bound for the standard error. (If one
standard error falls below `min_error`, `min_error` is used instead. This
happens before `order` is multiplied.)
- `rtol = 0`: The relative tolerance passed to `isapprox`.
- `debug = false`: If `debug = true` information on comparisons is always printed.
"""
function stat_equal(
        expected_value, actual_values::Vector, standard_errors::Vector;
        min_error = 0.001, order=2, debug=false, rtol=0.0
    )

    @assert order > 1
    N_matches = floor(length(actual_values) * (1 - 1 / order^2))
    if N_matches == 0
        error("No matches required. Try increasing the sample size or σ-Interval")
    elseif N_matches < 3
        @warn "Only $N_matches out of $(length(actual_values)) are required!"
    end

    is_approx_equal = [
        isapprox(expected_value, val, atol=order * max(min_error, err), rtol=rtol)
        for (val, err) in zip(actual_values, standard_errors)
    ]
    does_match = sum(is_approx_equal) >= N_matches

    if debug || !does_match
        printstyled("────────────────────────────────\n", color = :light_magenta)
        print("stat_equal returned ")
        printstyled("$(does_match)\n\n", color = does_match ? :green : :red)
        print("expected: $expected_value\n")
        print("values:   [")
        for i in eachindex(actual_values)
            if i < length(actual_values)
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("$(order)-σ:      [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("checks:   [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        printstyled("────────────────────────────────\n", color = :light_magenta)
    end
    does_match
end



@testset "DQMC: triangular Hubbard model vs dos Santos Paper" begin
    # > Attractive Hubbard model on a triangular lattice
    # dos Santos
    # https://journals.aps.org/prb/abstract/10.1103/PhysRevB.48.3976
    Random.seed!()
    sample_size = 5

    @time for (k, (mu, lit_oc, lit_pc,  beta, L)) in enumerate([
            (-2.0, 0.12, 1.0,  5.0, 4),
            (-1.2, 0.48, 1.50, 5.0, 4),
            ( 0.0, 0.88, 0.95, 5.0, 4),
            ( 1.2, 1.25, 1.55, 5.0, 4),
            ( 2.0, 2.00, 0.0,  5.0, 4)

            # (-2.0, 0.12, 1.0,  8.0, 4),
            # (-1.2, 0.48, 1.82, 8.0, 4),
            # ( 0.0, 0.88, 0.95, 8.0, 4),
            # ( 1.2, 1.25, 1.65, 8.0, 4),
            # ( 2.0, 2.00, 0.0,  8.0, 4),

            # (-2.0, 0.40, 1.0,  5.0, 6),
            # (-1.2, 0.40, 1.05, 5.0, 6),
            # (0.01, 0.80, 1.75, 5.0, 6),
            # ( 1.2, 1.40, 2.0,  5.0, 6),
            # ( 2.0, 2.00, 0.0,  5.0, 6)
        ])
        @info "[$(k)/5] μ = $mu (literature check)"
        m = HubbardModelAttractive(
            dims=2, L=L, l = MonteCarlo.TriangularLattice(L),
            t = 1.0, U = 4.0, mu = mu
        )
        OC_sample = []
        OC_errors = []
        PC_sample = []
        PC_errors = []
        for i in 1:sample_size
            mc = DQMC(
                m, beta=5.0, delta_tau=0.125, safe_mult=8,
                thermalization=2000, sweeps=2000, measure_rate=1,
                measurements = Dict{Symbol, MonteCarlo.AbstractMeasurement}()
            )
            push!(mc, :G => MonteCarlo.GreensMeasurement)
            push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement)
            run!(mc, verbose=false)
            measured = measurements(mc)

            # mean(measured[:G]) = MC mean
            # diag gets c_i c_i^† terms
            # 2 (1 - mean(c_i c_i^†)) = 2 mean(c_i^† c_i) where 2 follows from 2 spins
            occupation = 2 - 2(measured[:G].obs |> mean |> diag |> mean)
            push!(OC_sample, occupation)
            push!(OC_errors, 2(measured[:G].obs |> std_error |> diag |> mean))
            push!(PC_sample, measured[:PC].uniform_fourier |> mean)
            push!(PC_errors, measured[:PC].uniform_fourier |> std_error)
        end
        # min_error should compensate read-of errors & errors in the results
        # dos Santos used rather few sweeps, which seems to affect PC peaks strongly
        @test stat_equal(lit_oc, OC_sample, OC_errors, min_error=0.025)
        @test stat_equal(lit_pc, PC_sample, PC_errors, min_error=0.05)
    end
end

=#
